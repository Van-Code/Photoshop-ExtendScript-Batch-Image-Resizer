#target Photoshopvar X_NOINPUT = "You must enter a value";var X_NOFOLDER = "You must select a folder";var X_INCOMPLETE = "Whoops. Something isn't right. Please check. "var X_COMPLETE = "COMPLETE! "var X_EXIT = "EXITING"var FILE_TYPE = [".jpg", ".gif",".png",".jpeg", ".eps", ".psd",".pdf",".JPG"]; // The type of files that this script works on -- you can changevar SEARCH_MASK = []var color = app.backgroundColorcolor.rgb.red = 255color.rgb.green = 255color.rgb.blue = 255var backgroundColor = colorfor (k=0; k < FILE_TYPE.length; k++){	SEARCH_MASK.push("*" + FILE_TYPE[k]);}// save for web optionsvar opts = new ExportOptionsSaveForWeb();    opts.format = SaveDocumentType.PNG;    opts.PNG8 = true;    opts.transparency = false;    opts.matte = true;var startRulerUnits = app.preferences.rulerUnits;app.preferences.rulerUnits = Units.PIXELS;app.displayDialogs = DialogModes.NO; //app.Visible = false;try {	var newHeight = prompt("Enter number value for new Height in pixels.");	if (newHeight == null || newHeight == "undefined") {		throw X_NOINPUT + "for new Height. " + X_EXIT	};	var newWidth = prompt("Enter number value for new Width in pixels.");	if (newWidth == null  || newWidth == "undefined") {		throw X_NOINPUT + "for new Width. " + X_EXIT	};	newHeightpx = newHeight + "px";	newWidthpx = newWidth + "px";	var inputFolder = Folder.selectDialog("Select a folder to process");	if (inputFolder == null){		throw X_NOFOLDER + X_EXIT}; 	var fileList = [];	for(h = 0; h < SEARCH_MASK.length; h++){         var all =  inputFolder.getFiles()		var arr = inputFolder.getFiles(SEARCH_MASK[h])		for (j = 0; j < arr.length;j++){			fileList.push(arr[j]);		}	}			for (var i = 0; i < fileList.length; i++) {			// Only open non-hidden files and no folders			if ((fileList[i] instanceof File) && (fileList[i].hidden == false)) {				var docRef = open(fileList[i]);	                    docRef.changeMode(ChangeMode.RGB);                    docRef.backgroundColor = color                    if (docRef.width < newWidth && docRef.height < newHeight){                          docRef.resizeCanvas(newWidthpx, newHeightpx, AnchorPosition.MIDDLECENTER) ;                      }                else{					if (docRef.width >= docRef.height) {                                		// do if width is greater...						docRef.resizeImage(newWidthpx, undefined, undefined, ResampleMethod.BICUBIC);           						docRef.resizeCanvas(undefined, newHeightpx, AnchorPosition.MIDDLECENTER) ;  					}                else if (docRef.height >= docRef.width) {  // do if height is greater...                         					    docRef.resizeImage(undefined, newHeightpx, undefined, ResampleMethod.BICUBIC);						 docRef.resizeCanvas(newWidthpx, undefined, AnchorPosition.MIDDLECENTER );       					}                }				var outFolder = new Folder(docRef.path +"/resized");				if(outFolder .exists ==false){                    outFolder.create()                   };				var filename = File(outFolder + "/" + docRef.name.match(/(.*)\.[^\.]+$/)[1] + ".png");				docRef.exportDocument(filename, ExportType.SAVEFORWEB, opts);				docRef.close(SaveOptions.DONOTSAVECHANGES);			}		}		var newfiles = outFolder.getFiles();		var X_PROC = newfiles.length + " image file(s) processed."		if (fileList.length  =  newfiles.length) {			alert(X_COMPLETE + X_PROC);		}		else  {			alert(X_INCOMPLETE + X_PROC);		};}//catch (exception) {	//alert(exception)//}finally {	app.displayDialogs = startDisplayDialogs;	app.preferences.rulerUnit = startRulerUnits;}